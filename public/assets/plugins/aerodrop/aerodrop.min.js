class AeroDrop {
    constructor(element, options = {}) {
        if (!element)
            throw new Error("No element provided to initialize AeroDrop.");

        if (!options.uploadURL) throw new Error("No upload url provided");

        this.element = element;
        this.options = Object.assign(
            {
                name: "files",
                maxFiles: null,
                maxFileSize: 2 * 1024 * 1024, // 2 MB default
                allowedFileTypes: ["image/jpeg", "image/png", "image/gif"],
                multiple: true,
                // Callback functions
                onupload: null,
                onuploading: null,
                onerror: null,
                ondiscard: null,
                // New option to allow modifying the xhr before sending
                beforeSend: null,
            },
            options
        );

        // Initialize callback properties so they can be assigned later
        this.onupload = this.options.onupload;
        this.onuploading = this.options.onuploading;
        this.onerror = this.options.onerror;
        this.ondiscard = this.options.ondiscard;

        // If multiple file uploads are allowed, append "[]" to the field name.
        // This convention signals to the backend (e.g., PHP) that the field contains an array of values.
        if (this.options.multiple) {
            this.options.name += "[]";
        }

        this.init();
    }

    init() {
        // Clear container content
        this.element.innerHTML =
            '<p class="mb-0 text-muted">Drag &amp; drop files here</p>';

        // Create hidden file input
        this.fileInput = document.createElement("input");
        this.fileInput.type = "file";
        this.fileInput.style.display = "none";
        this.fileInput.multiple = !!this.options.multiple;

        this.element.appendChild(this.fileInput);

        // Create preview container
        this.previewContainer = document.createElement("div");
        this.previewContainer.className = "aerodrop-files";
        this.element.insertAdjacentElement("afterend", this.previewContainer);

        // (Optional) Create a global progress bar container if needed
        this.progressBar = document.createElement("div");
        this.progressBar.className = "aerodrop-progress-bar";
        this.progressBarInner = document.createElement("div");
        this.progressBarInner.className = "aerodrop-progress-bar-inner";
        this.progressBar.appendChild(this.progressBarInner);
        this.element.appendChild(this.progressBar);

        // Bind events
        this.bindEvents();
    }

    bindEvents() {
        // Clicking anywhere in the container (except on a discard button) opens the file selector
        this.element.addEventListener("click", () => {
            this.fileInput.click();
        });

        // Handle file selection
        this.fileInput.addEventListener("change", (e) => {
            const files = e.target.files;
            if (files.length > 0) {
                // Check for maximum files count if applicable
                if (
                    this.options.maxFiles &&
                    files.length > this.options.maxFiles
                ) {
                    if (typeof this.onerror === "function") {
                        this.onerror(
                            `Max ${this.options.maxFiles} files allowed`
                        );
                    }
                    return;
                }

                Array.from(files).forEach((file) => {
                    this.handleFile(file);
                });
            }
        });
    }

    handleFile(file) {
        const error = this.validateFile(file);
        // Validate file by size and type
        if (error) {
            if (typeof this.onerror === "function") this.onerror(error);
            return;
        }

        const previewItem = this.previewFile(file);

        // Start the upload process using XHR for this file
        this.uploadFile(file, previewItem);

        this.fileInput.value = "";
    }

    validateFile(file) {
        // Validate file size
        if (file.size > this.options.maxFileSize) {
            return "File too big";
        }
        // Validate file type if allowedFileTypes is provided
        if (
            this.options.allowedFileTypes.length > 0 &&
            !this.options.allowedFileTypes.includes(file.type)
        ) {
            return "Invalid file format";
        }
        return false;
    }

    previewFile(file) {
        // Create the file item container
        const previewItem = document.createElement("div");
        previewItem.className = "aerodrop-file-item";

        // Create the image element (for images or fallback icon)
        const img = document.createElement("img");
        img.src = file.type.startsWith("image")
            ? URL.createObjectURL(file)
            : "https://upload.wikimedia.org/wikipedia/commons/thumb/0/01/Google_Docs_logo_%282014-2020%29.svg/1481px-Google_Docs_logo_%282014-2020%29.svg.png";
        img.alt = "Preview";
        img.className = "file-preview-img";

        // Create the container for text and progress bar
        const flexContainer = document.createElement("div");
        flexContainer.className = "flex-grow-1";

        // Create a heading element for the file name (or default text)
        const fileTitle = document.createElement("h6");
        fileTitle.className = "mb-2";
        fileTitle.textContent = file.name || "File Preview";

        // Create the progress container
        const progressContainer = document.createElement("div");
        progressContainer.className = "progress mb-2";

        // Create the progress bar element
        const progressBar = document.createElement("div");
        progressBar.className = "progress-bar";
        progressBar.setAttribute("role", "progressbar");
        progressBar.style.width = "0%"; // Start at 0%
        progressBar.setAttribute("aria-valuenow", "0");
        progressBar.textContent = "0%";

        // Assemble the progress container
        progressContainer.appendChild(progressBar);

        // Assemble the flex container
        flexContainer.appendChild(fileTitle);
        flexContainer.appendChild(progressContainer);

        // Create the discard button
        const discardButton = document.createElement("button");
        discardButton.setAttribute("type", "button");
        discardButton.className = "discard-btn";
        discardButton.innerHTML =
            '<svg viewBox="0 0 25 25" width="15" height="15" stroke="currentColor" stroke-width="3" fill="none" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>';

        // Attach discard event listener to abort this file's upload and remove preview
        discardButton.addEventListener("click", (ev) => {
            ev.stopPropagation();
            // Abort the XHR upload if it exists for this file
            if (previewItem.xhr) {
                previewItem.xhr.abort();
            }
            if (typeof this.ondiscard === "function") {
                this.ondiscard(file);
            }
            previewItem.remove();
        });

        // Assemble the file preview item
        previewItem.appendChild(img);
        previewItem.appendChild(flexContainer);
        previewItem.appendChild(discardButton);

        // Append the preview item to the container
        this.previewContainer.appendChild(previewItem);

        return previewItem;
    }

    // uploadFile(file, previewItem) {
    //     const progressBar = previewItem.querySelector('.progress-bar');
    //     const xhr = new XMLHttpRequest();

    //     xhr.responseType = 'json'

    //     // Monitor upload progress for this file
    //     xhr.upload.addEventListener('progress', (event) => {
    //         if (event.lengthComputable) {
    //             const progress = Math.round((event.loaded / event.total) * 100);
    //             progressBar.style.width = progress + '%';
    //             progressBar.setAttribute('aria-valuenow', progress);
    //             progressBar.textContent = progress + '%';
    //             if (typeof this.onuploading === "function") {
    //                 this.onuploading(file, progress);
    //             }
    //         }
    //     });

    //     // Handle the request completion
    //     xhr.onload = () => {
    //         if (typeof this.onupload === 'function') {
    //             this.onupload(xhr.response);
    //         }
    //     };

    //     // Handle the request error
    //     xhr.onerror = (xhr) => {
    //         if (typeof this.onerror === 'function') {
    //             this.onerror(xhr);
    //         }
    //     };

    //     // Prepare form data for the file
    //     const formData = new FormData();
    //     formData.append("file", file);

    //     // Open the XHR request
    //     xhr.open('POST', this.options.uploadURL, true);

    //     // Call the beforeSend callback if provided to set CSRF token or other headers
    //     if (typeof this.options.beforeSend === "function") {
    //         this.options.beforeSend(xhr);
    //     }

    //     // Send the request with form data
    //     xhr.send(formData);

    //     // Store the xhr instance on the preview element for this file
    //     previewItem.xhr = xhr;
    // }

    uploadFile(file, previewItem) {
        const progressBar = previewItem.querySelector(".progress-bar");
        const xhr = new XMLHttpRequest();
        xhr.responseType = "json";

        // Monitor upload progress for this file
        xhr.upload.addEventListener("progress", (event) => {
            if (event.lengthComputable) {
                const progress = Math.round((event.loaded / event.total) * 100);
                progressBar.style.width = progress + "%";
                progressBar.setAttribute("aria-valuenow", progress);
                progressBar.textContent = progress + "%";
                if (typeof this.onuploading === "function") {
                    this.onuploading(file, progress);
                }
            }
        });

        // Handle the request completion
        xhr.onload = () => {

            if (typeof this.onupload === "function") {
                this.onupload(xhr.response);
            }

            const successMessage        = document.createElement("p");
            successMessage.innerHTML    = `Upload successful <svg viewBox="0 0 24 24" width="16" height="16" stroke="green" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round" class="css-i6dzq1"><polyline points="20 6 9 17 4 12"></polyline></svg>`;
            
            const hiddenInput   = document.createElement("input");
            hiddenInput.type    = "hidden";
            hiddenInput.name    = this.options.name;
            hiddenInput.value   = xhr.response.file;

            previewItem.querySelector(".progress")?.replaceWith(successMessage);
            previewItem.appendChild(hiddenInput)
        };

        // Handle the request error
        xhr.onerror = (errorEvent) => {
            // Invoke the provided error callback, if any
            if (typeof this.onerror === "function") {
                this.onerror(errorEvent);
            }
            // Update the preview item: set background red
            previewItem.classList.add("bg-danger", "text-white");
            // Remove the progress container (which contains the progress bar)
            previewItem
                .querySelector(".progress")
                ?.replaceWith("Error uploading");
        };

        // Prepare form data for the file
        const formData = new FormData();
        formData.append("file", file);

        // Open the XHR request
        xhr.open("POST", this.options.uploadURL, true);

        // Call the beforeSend callback if provided to set CSRF token or other headers
        if (typeof this.options.beforeSend === "function") {
            this.options.beforeSend(xhr);
        }

        // Send the request with form data
        xhr.send(formData);

        // Store the xhr instance on the preview element for this file
        previewItem.xhr = xhr;
    }
}
